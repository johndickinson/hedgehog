#!/bin/bash
# 
# Copyright 2014 Internet Corporation for Assigned Names and Numbers.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Developed by Sinodun IT (www.sinodun.com)
#

# 
# File:   database_update_tlds
#

eval $(@LIBEXEC@/conf_read)

REQUIRED_API_VERSION=@DB_VERSION@
DB_NAME=$hhconfig_database_name
DATA_DIR=$hhconfig_directories_data
TLDS_DIR=$hhconfig_directories_conf/tlds.d
export PGPASSWORD=$hhconfig_database_owner_pass

usage () {
	echo
	echo "Update the TLD list in the database. This reads input from files"
	echo "from the $TLDS_DIR directory."
	echo "No action is taken on TLDs that are in the database but are not in the input files."
	echo 
    echo "Usage: $(basename $0) options"
    echo
    echo "Supported options:"
    echo "  -h Show this help."
}

while getopts ":h" opt; do
    case $opt in
        h  ) usage
             exit 1 ;;
        \? ) usage
             exit 1 ;;
    esac
done

echo "`date`: $0 COMMENCED"
USER=$(whoami)
[ $USER != $hhconfig_database_owner ] && echo "Must be $hhconfig_database_owner to run this script" && exit 1

DB_API_VERSION=`psql -h $hhconfig_database_host $DB_NAME -tc  "select version from dsc.version;"`
[ $DB_API_VERSION -ne $REQUIRED_API_VERSION ] && echo "Error: Database API version incorrect." && exit 1


if [ ! -d $TLDS_DIR ] ; then
	echo "No tlds.d dir found. Expecting a dir $TLDS_DIR... done..."
	exit 1
fi


for TLD_FILE in ${TLDS_DIR}/* ; do
  # Process the tld file
  echo "Processing file: " $TLD_FILE
  while read line || [[ -n "$line" ]]; do

  	trimmed_line=`echo $line | sed -e 's/^ *//' -e 's/ *$//'`

  	if [[ -z ${trimmed_line} ]] || [[ "${trimmed_line}" =~ ^# ]] ; then
  		continue
  	fi	
	
  	OIFS=$IFS
  	IFS=','
  	read -ra arrline <<< "$trimmed_line"
  	IFS=$OIFS
  	ALABEL=`echo ${arrline[0]} | sed -e 's/^ *//' -e 's/ *$//'`
  	ULABEL=`echo ${arrline[1]} | sed -e 's/^ *//' -e 's/ *$//'`
  	ENGLISH=`echo ${arrline[2]} | sed -e 's/^ *//' -e 's/ *$//'`
    TLDTYPE`echo ${arrline[3]} | sed -e 's/^ *//' -e 's/ *$//'`
    
  	# First, validate the input	
  	if [ -z "$ALABEL" ] ; then
  		echo "Missing alabel. This entry will be ignored."
  		continue
  	fi	
	
  	if ! [[ "${ALABEL}" =~ ^[a-zA-Z0-9\-]+$ ]] ; then
  		echo "alabel name '${ALABEL}' is invalid. It may contain alphanumeric characters and hyphens (-) only. This entry will be ignored."
  		continue
  	fi	
	
  	if [ -z "$ULABEL" ] ; then
  		echo "Missing ulabel field for alabel $ALABEL - alabel ignored"
  		continue
  	fi

  	if [ -z $ENGLISH ] ; then
    	echo "Missing english field for alabel $ALABEL - alabel ignored"
    	continue
    fi
    
  	if [ -z $TLDTYPE ] ; then
    	echo "Missing TLD type field for alabel $ALABEL - alabel ignored"
    	continue
    fi

    # Check if this tld already exists
    CHECK=$(psql -h $hhconfig_database_host $DB_NAME -tc "select count(*) from tlds where alabel ='${ALABEL}')
    [ ! $CHECK -eq 0 ] && continue
    CHECK=$(psql -h $hhconfig_database_host $DB_NAME -tc "select count(*) from tld_types where type_name ='${TLDTYPE}')
    [ ! $CHECK -eq 1 ] && continue
    
    $(psql -h $hhconfig_database_host $DB_NAME -tc "insert into tlds (alabel, ulabel, english, type) values \ 
       ('${ALABEL}', '${ULABEL}', '${ENGLISH}', select id from  tld_types where type_name='${TLDTYPE}'))

  done < ${TLD_FILE}
done

echo "`date`: $0 COMPLETED"
